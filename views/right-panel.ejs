<!-- Right Panel Content -->
<div class="right-panel" id="rightPanel">
    
    <div class="options-bar">

        <div class="options-left">
        <div class="files-option-button" onclick="toggleToEditor()">
            <i class="fas fa-code fa-lg"></i>
        </div>
        <div class="view-toggle-button" onclick="togglePreview()">
            <i class="fas fa-eye fa-lg"></i>
        </div>
        </div>

        <div class="options-title"> Code Editor </div>
    </div>
    
    <!-- File Sidebar (hidden by default) -->
    <div id="fileSidebar" class="file-sidebar file-sidebar-hidden">
        <div class="file-sidebar-header">
            <h3>Files</h3>
            <button class="file-sidebar-close-btn" id="closeFileSidebar" title="Close Sidebar">&times;</button>
        </div>
        <div class="file-list" id="fileList">
            <!-- Files will be dynamically added here -->
        </div>
    </div>

    <!-- Monaco Editor Container -->
    <div id="monacoEditorContainer" class="monaco-editor-container">
        <div id="monacoEditor"></div>
    </div>
    
    <%- include('preview') %>
</div>

<!-- Monaco Editor CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>
<script>
    // Global variables for current project
    let currentProjectId = null;
    let currentFiles = {};
    
    // Sidebar logic
    const filesBtn = document.querySelector('.files-option-button');
    const sidebar = document.getElementById('fileSidebar');
    const closeSidebarBtn = document.getElementById('closeFileSidebar');
    const fileList = document.getElementById('fileList');
    const monacoEditorContainer = document.getElementById('monacoEditorContainer');

    filesBtn.addEventListener('click', function() {
        sidebar.classList.remove('file-sidebar-hidden');
        sidebar.classList.add('file-sidebar-visible');
        monacoEditorContainer.classList.add('editor-with-sidebar');
    });
    
    closeSidebarBtn.addEventListener('click', function() {
        sidebar.classList.add('file-sidebar-hidden');
        sidebar.classList.remove('file-sidebar-visible');
        monacoEditorContainer.classList.remove('editor-with-sidebar');
    });
    
    // Function to update file list
    function updateFileList(files) {
        fileList.innerHTML = '';
        currentFiles = {};
        
        files.forEach(file => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.setAttribute('data-file', file.path);
            fileItem.innerHTML = `<span>${file.name}</span>`;
            
            fileItem.addEventListener('click', function() {
                setActiveFile(file.path);
                loadFileContent(file.path);
            });
            
            fileList.appendChild(fileItem);
            currentFiles[file.path] = file;
        });
        
        // Set first file as active if available
        if (files.length > 0) {
            setActiveFile(files[0].path);
            loadFileContent(files[0].path);
        }
    }
    
    // Function to set active file
    function setActiveFile(filePath) {
        const fileItems = document.querySelectorAll('.file-item');
        fileItems.forEach(item => {
            if(item.getAttribute('data-file') === filePath) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }
    
    // Function to load file content
    function loadFileContent(filePath) {
        if (!currentProjectId || !currentFiles[filePath]) return;
        
        const file = currentFiles[filePath];
        
        if (window.monacoEditor) {
            window.monacoEditor.setValue(file.content);
            monaco.editor.setModelLanguage(window.monacoEditor.getModel(), file.language);
            
            // Track current file path for auto-sync
            if (window.monacoEditor.onDidChangeModelContent) {
                // Access the closure variables from the Monaco initialization
                // We'll use a global variable approach for simplicity
                window.currentEditingFilePath = filePath;
            }
        }
    }

    // Function to sync changes back to virtual file system
    function syncChangesToVirtualFS(filePath, newContent) {
        if (!currentProjectId) return;
        
        fetch(`/api/update-file/${currentProjectId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                filePath: filePath,
                content: newContent
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update local file cache
                if (currentFiles[filePath]) {
                    currentFiles[filePath].content = newContent;
                }
                console.log('✅ Changes synced to virtual file system');
            } else {
                console.error('❌ Failed to sync changes:', data.error);
            }
        })
        .catch(error => {
            console.error('❌ Error syncing changes:', error);
        });
    }
    
    // Function to initialize project files
    function initializeProject(projectId, files) {
        currentProjectId = projectId;
        window.currentProjectId = projectId; // Set global for Monaco editor
        updateFileList(files);
        
        // Show sidebar by default when project is loaded
        sidebar.classList.remove('file-sidebar-hidden');
        sidebar.classList.add('file-sidebar-visible');
        monacoEditorContainer.classList.add('editor-with-sidebar');
    }
    
    // Monaco Editor initialization
    require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' } });
    require(['vs/editor/editor.main'], function() {
        window.monacoEditor = monaco.editor.create(document.getElementById('monacoEditor'), {
            value: '// Your code will appear here...',
            language: 'plaintext',
            theme: 'vs-dark',
            automaticLayout: true,
            minimap: { enabled: true },
            fontSize: 14,
            lineNumbers: 'on',
            roundedSelection: false,
            scrollBeyondLastLine: false,
            readOnly: false,
            cursorStyle: 'line',
            scrollbar: {
                vertical: 'visible',
                horizontal: 'visible'
            }
        });
        
        // Add change listener to auto-sync changes
        let syncTimeout = null;
        
        window.monacoEditor.onDidChangeModelContent(function() {
            if (window.currentEditingFilePath && window.currentProjectId) {
                // Debounce sync to avoid too many API calls
                clearTimeout(syncTimeout);
                syncTimeout = setTimeout(() => {
                    const newContent = window.monacoEditor.getValue();
                    syncChangesToVirtualFS(window.currentEditingFilePath, newContent);
                }, 1000); // Sync after 1 second of no changes
            }
        });
        
        window.addEventListener('resize', function() {
            window.monacoEditor.layout();
        });
    });
    
    // Make functions globally available
    window.initializeProject = initializeProject;
    window.updateFileList = updateFileList;
    
    // Preview functionality
    let isPreviewMode = false;
    let currentHtmlContent = '';
    
    function togglePreview() {
        const monacoContainer = document.getElementById('monacoEditorContainer');
        const previewContainer = document.getElementById('previewContainer');
        
        if (isPreviewMode) {
            // Switch back to editor
            monacoContainer.style.display = 'block';
            previewContainer.style.display = 'none';
            isPreviewMode = false;
            
            // Update button appearance
            document.querySelector('.view-toggle-button').classList.remove('active');
            document.querySelector('.files-option-button').classList.remove('active');
            
            // Trigger Monaco editor resize
            if (window.monacoEditor) {
                window.monacoEditor.layout();
            }
        } else {
            // Switch to preview
            monacoContainer.style.display = 'none';
            previewContainer.style.display = 'block';
            isPreviewMode = true;
            
            // Update button appearance
            document.querySelector('.view-toggle-button').classList.add('active');
            document.querySelector('.files-option-button').classList.remove('active');
            
            // Initialize preview if we have project data
            if (currentProjectId && Object.keys(currentFiles).length > 0) {
                initializePreview();
            }
        }
    }
    
    function toggleToEditor() {
        const monacoContainer = document.getElementById('monacoEditorContainer');
        const previewContainer = document.getElementById('previewContainer');
        
        // Always switch to editor when files button is clicked
        monacoContainer.style.display = 'block';
        previewContainer.style.display = 'none';
        isPreviewMode = false;
        
        // Update button appearance
        document.querySelector('.view-toggle-button').classList.remove('active');
        document.querySelector('.files-option-button').classList.add('active');
        
        // Trigger Monaco editor resize
        if (window.monacoEditor) {
            window.monacoEditor.layout();
        }
    }
    
    function initializePreview() {
        // Find HTML files
        const htmlFiles = Object.values(currentFiles).filter(file => 
            file.name.toLowerCase().endsWith('.html') || 
            file.name.toLowerCase().endsWith('.htm')
        );
        
        if (htmlFiles.length === 0) {
            showPreviewError('No HTML files found in this project. Please generate an HTML file first.');
            return;
        }
        
        // If multiple HTML files, show file selector
        if (htmlFiles.length > 1) {
            showFileSelector(htmlFiles);
        } else {
            // Single HTML file, load it directly
            loadHtmlFile(htmlFiles[0]);
        }
    }
    
    function showFileSelector(htmlFiles) {
        const fileSelector = document.getElementById('fileSelector');
        const select = document.getElementById('htmlFileSelect');
        
        // Clear existing options
        select.innerHTML = '<option value="">Select HTML file to preview...</option>';
        
        // Add HTML files
        htmlFiles.forEach(file => {
            const option = document.createElement('option');
            option.value = file.path;
            option.textContent = file.name;
            select.appendChild(option);
        });
        
        fileSelector.style.display = 'block';
        
        // Auto-select first file
        if (htmlFiles.length > 0) {
            select.value = htmlFiles[0].path;
            loadSelectedFile();
        }
    }
    
    function loadSelectedFile() {
        const select = document.getElementById('htmlFileSelect');
        const selectedPath = select.value;
        
        if (!selectedPath) return;
        
        const selectedFile = currentFiles[selectedPath];
        if (selectedFile) {
            loadHtmlFile(selectedFile);
        }
    }
    
    function loadHtmlFile(file) {
        showPreviewLoading();
        
        // Use the file content directly from our cache
        if (file.content) {
            currentHtmlContent = file.content;
            displayPreview(file.content);
        } else {
            // Fallback to fetching from server
            fetch(`/api/file/${currentProjectId}/${encodeURIComponent(file.path)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.text();
                })
                .then(content => {
                    currentHtmlContent = content;
                    displayPreview(content);
                })
                .catch(error => {
                    console.error('Error loading file:', error);
                    showPreviewError(`Failed to load ${file.name}: ${error.message}`);
                });
        }
    }
    
    function displayPreview(htmlContent) {
        const iframe = document.getElementById('previewIframe');
        const loading = document.getElementById('previewLoading');
        const error = document.getElementById('previewError');
        
        // Hide loading and error
        loading.style.display = 'none';
        error.style.display = 'none';
        
        // Show iframe
        iframe.style.display = 'block';
        
        // Create a complete HTML document with the content
        const fullHtml = `
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>App Preview</title>
                <style>
                    /* Reset and base styles */
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body { font-family: Arial, sans-serif; line-height: 1.6; }
                </style>
            </head>
            <body>
                ${htmlContent}
            </body>
            </html>
        `;
        
        // Write content to iframe
        iframe.srcdoc = fullHtml;
    }
    
    function showPreviewLoading() {
        const iframe = document.getElementById('previewIframe');
        const loading = document.getElementById('previewLoading');
        const error = document.getElementById('previewError');
        
        iframe.style.display = 'none';
        error.style.display = 'none';
        loading.style.display = 'block';
    }
    
    function showPreviewError(message) {
        const iframe = document.getElementById('previewIframe');
        const loading = document.getElementById('previewLoading');
        const error = document.getElementById('previewError');
        const errorMessage = document.getElementById('errorMessage');
        
        iframe.style.display = 'none';
        loading.style.display = 'none';
        error.style.display = 'block';
        errorMessage.textContent = message;
    }
    
    function refreshPreview() {
        if (currentHtmlContent) {
            displayPreview(currentHtmlContent);
        }
    }
    
    function openInNewTab() {
        if (currentHtmlContent) {
            const blob = new Blob([currentHtmlContent], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            window.open(url, '_blank');
        }
    }
</script> 